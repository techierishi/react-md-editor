{"version":3,"sources":["../../../../src/components/DragBar/index.tsx"],"names":["DragBar","drag","handleMouseMove","event","newHeight","height","clientY","dragY","props","minHeight","maxHeight","onChange","handleMouseUp","undefined","handleMouseDown","document","removeEventListener","addEventListener","prefixCls","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;IAWqBA,O;;;;;;;;;;;;;;;UACZC,I;;UACCC,e,GAAkB,UAACC,KAAD,EAAuB;AAC/C,UAAI,MAAKF,IAAT,EAAe;AACb,YAAMG,SAAS,GAAG,MAAKH,IAAL,CAAUI,MAAV,GAAmBF,KAAK,CAACG,OAAzB,GAAmC,MAAKL,IAAL,CAAUM,KAA/D;;AACA,YAAIH,SAAS,IAAI,MAAKI,KAAL,CAAWC,SAAxB,IAAqCL,SAAS,IAAI,MAAKI,KAAL,CAAWE,SAAjE,EAA4E;AAC1E,gBAAKF,KAAL,CAAWG,QAAX,CAAoB,MAAKV,IAAL,CAAUI,MAAV,IAAoBF,KAAK,CAACG,OAAN,GAAgB,MAAKL,IAAL,CAAUM,KAA9C,CAApB;AACD;AACF;AACF,K;;UACOK,a,GAAgB,YAAM;AAC5B,YAAKX,IAAL,GAAYY,SAAZ;AACD,K;;UACOC,e,GAAkB,UAACX,KAAD,EAAyD;AACjF,YAAKF,IAAL,GAAY;AACVI,QAAAA,MAAM,EAAE,MAAKG,KAAL,CAAWH,MADT;AAEVE,QAAAA,KAAK,EAAEJ,KAAK,CAACG;AAFH,OAAZ;AAID,K;;;;;;;2CAC6B;AAC5BS,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,WAA7B,EAA0C,KAAKd,eAA/C;AACAa,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,SAA7B,EAAwC,KAAKJ,aAA7C;AACD;;;wCAC0B;AACzBG,MAAAA,QAAQ,CAACE,gBAAT,CAA0B,WAA1B,EAAuC,KAAKf,eAA5C;AACAa,MAAAA,QAAQ,CAACE,gBAAT,CAA0B,SAA1B,EAAqC,KAAKL,aAA1C;AACD;;;6BACQ;AAAA,UACCM,SADD,GACe,KAAKV,KADpB,CACCU,SADD;AAEP,0BACE;AAAK,QAAA,SAAS,YAAKA,SAAL,SAAd;AAAoC,QAAA,WAAW,EAAE,KAAKJ;AAAtD,sBACE;AAAK,QAAA,OAAO,EAAC,aAAb;AAA2B,QAAA,MAAM,EAAC;AAAlC,sBACE;AAAM,QAAA,IAAI,EAAC,cAAX;AAA0B,QAAA,CAAC,EAAC;AAA5B,QADF,CADF,CADF;AAOD;;;EApCkCK,gB","sourcesContent":["import React, { Component } from 'react';\nimport { IProps } from '../../utils';\nimport './index.less';\n\nexport interface IDragBarProps extends IProps {\n  height: number;\n  maxHeight: number;\n  minHeight: number;\n  onChange: (value: number) => void;\n}\n\nexport default class DragBar extends Component<IDragBarProps> {\n  public drag?: { height: number, dragY: number };\n  private handleMouseMove = (event: MouseEvent) => {\n    if (this.drag) {\n      const newHeight = this.drag.height + event.clientY - this.drag.dragY;\n      if (newHeight >= this.props.minHeight && newHeight <= this.props.maxHeight) {\n        this.props.onChange(this.drag.height + (event.clientY - this.drag.dragY));\n      }\n    }\n  }\n  private handleMouseUp = () => {\n    this.drag = undefined;\n  }\n  private handleMouseDown = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    this.drag = {\n      height: this.props.height,\n      dragY: event.clientY\n    };\n  }\n  public componentWillUnmount() {\n    document.removeEventListener('mousemove', this.handleMouseMove);\n    document.removeEventListener('mouseup', this.handleMouseUp);\n  }\n  public componentDidMount() {\n    document.addEventListener('mousemove', this.handleMouseMove);\n    document.addEventListener('mouseup', this.handleMouseUp);\n  }\n  render() {\n    const { prefixCls } = this.props\n    return (\n      <div className={`${prefixCls}-bar`} onMouseDown={this.handleMouseDown}>\n        <svg viewBox=\"0 0 512 512\" height=\"100%\">\n          <path fill=\"currentColor\" d=\"M304 256c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48 48 21.5 48 48zm120-48c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm-336 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z\" />\n        </svg>\n      </div>\n    );\n  }\n}"]}