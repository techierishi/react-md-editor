{"version":3,"sources":["../../../src/commands/index.ts"],"names":["bold","code","italic","link","unorderedListCommand","orderedListCommand","checkedListCommand","quote","hr","title","divider","codePreview","codeEdit","codeLive","fullscreen","image","strikethrough","insertText","getCommands","getStateFromTextArea","textArea","selection","start","selectionStart","end","selectionEnd","text","value","selectedText","slice","TextAreaTextApi","focus","TextAreaCommandOrchestrator","textApi","command","execute"],"mappings":"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","sourcesContent":["import { bold } from './bold';\nimport { code } from './code';\nimport { italic } from './italic';\nimport { link } from './link';\nimport { unorderedListCommand, orderedListCommand, checkedListCommand } from './list';\nimport { quote } from './quote';\nimport { hr } from './hr';\nimport { title } from './title';\nimport { divider } from './divider';\nimport { codePreview, codeEdit, codeLive } from './preview';\nimport { fullscreen } from './fullscreen';\nimport { image } from './image';\nimport { strikethrough } from './strikeThrough';\nimport insertText from '../utils/InsertTextAtPosition';\n\nexport interface CommandOrchestrator {\n  executeCommand(command: ICommand): void\n}\n\nexport interface ICommand {\n  name?: string,\n  icon?: React.ReactElement,\n  keyCommand: string,\n  value?: string,\n  position?: 'right'\n  liProps?: React.LiHTMLAttributes<HTMLLIElement>,\n  buttonProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | null,\n  execute?: (state: TextState, api: TextApi) => void,\n}\n\nexport interface TextRange {\n  start: number;\n  end: number;\n}\n\nexport interface TextState {\n  text: string,\n  selectedText: string,\n  selection: TextRange,\n}\n\nexport interface TextApi {\n  /**\n   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the\n   * selection start and selection end will be the same and will both point to the end\n   * @param text Text that should replace the current selection\n   */\n  replaceSelection(text: string): TextState;\n\n  /**\n   * Selects the specified text range\n   * @param selection\n   */\n  setSelectionRange(selection: TextRange): TextState;\n}\n\n\nconst getCommands: () => ICommand[] = () => [\n  bold, italic, strikethrough, hr, title, divider, link, quote, code, image, divider,\n  unorderedListCommand, orderedListCommand, checkedListCommand, divider, codeEdit, codeLive, codePreview, divider, fullscreen,\n];\n\nfunction getStateFromTextArea(textArea: HTMLTextAreaElement): TextState {\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd\n    },\n    text: textArea.value,\n    selectedText: textArea.value.slice(textArea.selectionStart, textArea.selectionEnd)\n  };\n}\n\nclass TextAreaTextApi implements TextApi {\n  textArea: HTMLTextAreaElement;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n  }\n\n  replaceSelection(text: string): TextState {\n    insertText(this.textArea, text);\n    return getStateFromTextArea(this.textArea);\n  }\n\n  setSelectionRange(selection: TextRange): TextState {\n    this.textArea.focus();\n    this.textArea.selectionStart = selection.start;\n    this.textArea.selectionEnd = selection.end;\n    return getStateFromTextArea(this.textArea);\n  }\n}\n\n\nclass TextAreaCommandOrchestrator implements CommandOrchestrator {\n  textArea: HTMLTextAreaElement;\n  textApi: TextApi;\n\n  constructor(textArea: HTMLTextAreaElement) {\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n\n  executeCommand(command: ICommand): void {\n    command.execute && command.execute(getStateFromTextArea(this.textArea), this.textApi);\n  }\n}\n\nexport {\n  // Toolbars.\n  bold, italic, strikethrough, hr, title, divider, link, quote, code, image,\n  unorderedListCommand, orderedListCommand, checkedListCommand, codeEdit, codeLive, codePreview, fullscreen,\n  // Tool method.\n  getCommands, getStateFromTextArea, TextAreaCommandOrchestrator, TextAreaTextApi\n}\n"]}