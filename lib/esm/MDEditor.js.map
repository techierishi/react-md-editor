{"version":3,"sources":["../../src/MDEditor.tsx"],"names":["React","classnames","MarkdownPreview","TextArea","Toolbar","DragBar","getCommands","TextAreaCommandOrchestrator","MDEditor","props","preview","createRef","textarea","commandOrchestrator","leftScroll","handleScroll","e","current","mdp","warp","scale","scrollHeight","offsetHeight","target","scrollTop","handleCommand","command","keyCommand","setState","value","fullscreen","state","document","body","style","overflow","executeCommand","height","handleChange","text","nextProps","mdStr","onChange","renderHTML","prefixCls","className","commands","visiableDragbar","previewOptions","textareaProps","maxHeight","minHeight","autoFocus","tabSize","other","cls","test","bind","newHeight","PureComponent","Markdown","displayName","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classnames from 'classnames';\nimport { ReactMarkdownProps } from 'react-markdown';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, TextAreaCommandOrchestrator, ICommand, CommandOrchestrator } from './commands';\nimport './index.less';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: React.CSSProperties['height'];\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: 'live' | 'edit' | 'preview';\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: ReactMarkdownProps;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n}\n\nexport interface MDEditorState {\n  height: React.CSSProperties['height'];\n  preview?: MDEditorProps['preview'];\n  fullscreen?: boolean;\n  value?: string;\n}\n\nexport default class MDEditor extends React.PureComponent<MDEditorProps, MDEditorState> {\n  static Markdown = MarkdownPreview;\n  public static displayName = 'MDEditor';\n  public preview = React.createRef<MarkdownPreview>();\n  public textarea = React.createRef<TextArea>();\n  public commandOrchestrator!: CommandOrchestrator;\n  public leftScroll:boolean = false;\n  public static defaultProps: MDEditorProps = {\n    value: '',\n    prefixCls: 'w-md-editor',\n    height: 200,\n    minHeight: 100,\n    maxHeight: 1200,\n    tabSize: 2,\n    visiableDragbar: true,\n    preview: 'live',\n    fullscreen: false,\n    commands: getCommands(),\n  }\n  public constructor(props: MDEditorProps) {\n    super(props);\n    this.state = {\n      height: props.height,\n      preview: props.preview,\n      fullscreen: props.fullscreen,\n      value: props.value,\n    };\n  }\n  public componentDidMount() {\n    this.handleChange(this.state.value);\n    this.commandOrchestrator = new TextAreaCommandOrchestrator(this.textarea.current!.text.current as HTMLTextAreaElement);\n  }\n  public UNSAFE_componentWillReceiveProps(nextProps: MDEditorProps) {\n    if (nextProps.preview !== this.props.preview) {\n      this.setState({ preview: nextProps.preview });\n    }\n    if (nextProps.fullscreen !== this.props.fullscreen) {\n      this.setState({ fullscreen: nextProps.fullscreen });\n    }\n    if (nextProps.value !== this.props.value) {\n      this.setState({ value: nextProps.value }, () => {\n        this.handleChange(nextProps.value);\n      });\n    }\n  }\n  private handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n    const preview = this.preview.current!.mdp.current! as HTMLDivElement;\n    const textarea = this.textarea.current!.warp.current! as HTMLDivElement;\n    if (textarea && preview) {\n      const scale = (textarea.scrollHeight - textarea.offsetHeight) / (preview.scrollHeight - preview.offsetHeight);\n      if (e.target === textarea && this.leftScroll) {\n        preview.scrollTop = textarea.scrollTop / scale;\n      }\n      if (e.target === preview && !this.leftScroll) {\n        textarea.scrollTop = preview.scrollTop * scale;\n      }\n    }\n  }\n  private handleChange(mdStr?: string) {\n    const { onChange } = this.props;\n    this.preview.current!.renderHTML(mdStr);\n    onChange && onChange(mdStr || '');\n  }\n  public handleCommand = (command: ICommand) => {\n    if (command.keyCommand === 'preview') {\n      this.setState({ preview: command.value as MDEditorState['preview'] });\n    }\n    if (command.keyCommand === 'fullscreen') {\n      this.setState({ fullscreen: !this.state.fullscreen });\n      document.body.style.overflow = this.state.fullscreen ? 'initial' : 'hidden';\n    }\n    this.commandOrchestrator.executeCommand(command);\n  }\n  public render() {\n    const { prefixCls, className, value, commands, height, visiableDragbar, preview, fullscreen, previewOptions, textareaProps, maxHeight, minHeight, autoFocus, tabSize, onChange, ...other } = this.props;\n    const cls = classnames(className, prefixCls, {\n      [`${prefixCls}-show-${this.state.preview}`]: this.state.preview,\n      [`${prefixCls}-fullscreen`]: this.state.fullscreen,\n    });\n    return (\n      <div className={cls} style={{ height: this.state.fullscreen ? '100%' : this.state.height }} {...other}>\n        <Toolbar\n          active={{\n            fullscreen: this.state.fullscreen,\n            preview: this.state.preview,\n          }}\n          prefixCls={prefixCls} commands={commands}\n          onCommand={this.handleCommand}\n        />\n        <div\n          className={`${prefixCls}-content`}\n          style={{ height: this.state.fullscreen ? 'calc(100% - 29px)' : (this.state.height as number) - 29 }}\n        >\n          {/(edit|live)/.test(this.state.preview as string) && (\n            <TextArea\n              ref={this.textarea}\n              tabSize={tabSize}\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              value={this.state.value}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              onScroll={this.handleScroll}\n              onMouseOver={() => this.leftScroll = true}\n              onMouseLeave={() => this.leftScroll = false}\n              onChange={this.handleChange.bind(this)}\n            />\n          )}\n          <MarkdownPreview\n            {...previewOptions}\n            ref={this.preview}\n            onScroll={this.handleScroll}\n            className={`${prefixCls}-preview`}\n          />\n          {visiableDragbar && this.state.preview !== 'preview' && !this.state.fullscreen && (\n            <DragBar\n              prefixCls={prefixCls}\n              height={this.state.height as number}\n              maxHeight={maxHeight!}\n              minHeight={minHeight!}\n              onChange={(newHeight) => {\n                this.setState({ height: newHeight });\n              }}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n"]}